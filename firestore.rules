rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==== HELPERS ====
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    

    // ==== USERS ====
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['displayName', 'email']) &&
        request.resource.data.displayName is string &&
        request.resource.data.email is string;
      allow update: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['displayName', 'email']) &&
        request.resource.data.displayName is string &&
        request.resource.data.email is string;
    }

    // ==== ANSWERS (para KPIs) ====
    match /answers/{answerId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['uid', 'materia', 'correct', 'createdAt']) &&
        request.resource.data.uid == request.auth.uid;
    }

    // ==== FORUM POSTS ====
    match /forumPosts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['uid', 'content', 'createdAt']) &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() <= 500;
      allow update, delete: if isOwner(resource.data.uid);
      
      // ==== COMMENTS ====
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && 
          request.resource.data.keys().hasAll(['uid', 'content', 'createdAt']) &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.content is string &&
          request.resource.data.content.size() <= 200;
        allow update, delete: if isOwner(resource.data.uid);
      }
    }

    // ==== FRIEND REQUESTS ====
    match /friendRequests/{requestId} {
      allow read: if isSignedIn() && 
        (resource.data.fromUid == request.auth.uid || resource.data.toUid == request.auth.uid);
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['fromUid', 'toUid', 'status', 'createdAt']) &&
        request.resource.data.fromUid == request.auth.uid &&
        request.resource.data.toUid != request.auth.uid &&
        request.resource.data.status == 'pending';
      allow update: if isSignedIn() && 
        resource.data.toUid == request.auth.uid &&
        request.resource.data.status in ['accepted', 'rejected'];
    }

    // ==== FRIENDSHIPS ====
    match /friendships/{pairId} {
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.users;
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['users', 'createdAt']) &&
        request.auth.uid in request.resource.data.users &&
        request.resource.data.users.size() == 2;
      allow delete: if isSignedIn() && 
        request.auth.uid in resource.data.users;
    }

    // ==== CHATS ====
    match /chats/{chatId} {
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.users;
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['users', 'createdAt']) &&
        request.auth.uid in request.resource.data.users;
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.users;
      
      // ==== MESSAGES ====
      match /messages/{messageId} {
        allow read: if isSignedIn() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow create: if isSignedIn() && 
          request.resource.data.keys().hasAll(['uid', 'text', 'createdAt']) &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.text is string &&
          request.resource.data.text.size() <= 1000 &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow update, delete: if isOwner(resource.data.uid);
      }
    }

    // ==== NOTIFICATIONS ====
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.uid);
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['uid', 'type', 'message', 'read', 'createdAt']) &&
        request.resource.data.uid is string;
      allow update: if isOwner(resource.data.uid) && 
        request.resource.data.keys().hasAll(['read']);
    }

    // ==== QUESTÕES POR COLEÇÃO ====
    match /atualidades_questoes/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /conhecimentos_gerais/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /contabilidade_questoes/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /direito_administrativo/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /direito_constitucional/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /informatica/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /ingles_questoes/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /matematica/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /portugues_questoes/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /raciocinio_Logico/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /flashcards/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /questions/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }
    match /questoes/{qid=**} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.token.admin == true;
    }

    // ==== COMPATIBILIDADE COM SISTEMA ANTIGO ====
    match /usuarios/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /respostasUsuarios/{userId}/{materia}/{docId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    // ==== Default: nega tudo (sempre no final) ====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
